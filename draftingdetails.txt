drafting:

appointments
	- Appointment table
	- we have a patient name, patient id, and client it
		- take details from the ids, so that they update correctly
			- we have to check for deceased
	- DateTime string
	- proceedure string
	- we have a vet put down
	- status, string key ("CHECKED IN", "TENTATIVE", "CONFIRMED")
	- get the client names and other stuff from the relevant table
	- we can get the patient name from the Appointments table
	
	But, the best idea, is to simply return all relevant data in json form.
		- which means grabbing all relevant data from the database.

reminders
	- not much to say about this, reminder date, is it the date when it is meant
	to happen, or the date that you call?


follow up messages
	- from Visits table
	- Fucky floating point datetime representation
	- grab patient and client id from the db
	- it has the day? which is consistently incorrect.
	- it has a total, useless for now
	- reasons
	- the best strategy for this would to create a generic thank you message,
	and give the staff the tools to choose what kind of message they would
	like to return.

Thoughts on the potential end application
- we should have something that can be generic
- message queueing application
	- all messages have several properties
		- valid period, used to decide if to send or not, and sort
		- a type specific object that includes address and any specific content
		- a message body
		- supporting information
			- this supporting information will be key to success 
			- basically all the information available to the user, so we can
				confirm or deny the sending
		- a title
			- for internal use only
			- generated from patient details
		- a category
			- for sorting
			- generally reasons
		- a flag 
- accounts and logging
	- we log everything
	- accounts are controlled using a database
	- make setup easy
- settings
	- no need for ini, we always run on port 80
	- we setup with no admin, first login sets up details
		- one administrator account allowed to be created by the initial setup,
			but overal we are allowed multiple
	- admin can create, delete, and edit accounts
	- accounts
		- fullname
		- password
		- username
	- globals
		- automate sending?
		- settings per message type
			- appointments?
				- time before to send?
				- allow auto?
				- exclude filters
					- name with regex on the client
			- reminders?
				- allow auto?
				- checkbox of all types
			- follow up messages?
				- send after?
				- status filters (include ____)




More implementation specific details:
User accounts:
- basic http auth
/apiv1/login
/apiv1/logout
- all other take the auth key
Creating user accounts:
- requires an admin account
	- special case if there are no admin accounts
	- in which case there is a admin user account created

Deleting user accounts:
- own user or admin
changing password:
own user only


